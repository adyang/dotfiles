#!/bin/bash

main() {
  if [[ "${CI}" != 'true' ]]; then
    sudo_keep_alive
  fi
  brew_packages
  install_powerline
  symlink_dotfiles
  configure_iterm2
  configure_vim
  configure_asdf_plugins
  install_pip_packages
}

sudo_keep_alive() {
  sudo --validate
  while true; do sudo --non-interactive true; sleep 20; kill -0 "$$" || exit; done 2>/dev/null &
}

brew_packages() {
  if ! type brew &>/dev/null; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  brew analytics off && brew analytics
  brew update
  brew bundle --verbose
}

install_powerline() {
  echo 'Installing powerline-go...'
  local local_bin="${HOME}/.local/bin"
  local install_dir="${HOME}/.powerline-go"
  local url='https://github.com/justjanne/powerline-go/releases/download/v1.13.0/powerline-go-darwin-amd64'
  local dest="${install_dir}/${url##*/}-v1.13.0"
  if [[ ! -f "${dest}" ]]; then
    curl --create-dirs --progress-bar --location --output "${dest}" "${url}" || exit "$?"
    chmod u+x "${dest}"
    mkdir -p "${local_bin}"
    ln -sfv "${dest}" "${local_bin}/powerline-go"
  fi
}

symlink_dotfiles() {
  echo "Symlinking dotfiles to ${HOME} ..."
  local script_dir="$(dirname "$(realpath -s "${BASH_SOURCE[0]}")")"
  symlink_home_files "${script_dir}"
  symlink_nested_home_files "${script_dir}"
}

symlink_home_files() {
  shopt -s dotglob
  local script_dir="$1"
  local filepath
  for filepath in "${script_dir}/home"/*; do
    local file="${filepath##*/}"
    backup_if_regular_file "${HOME}/${file}"
    symlink_if_absent "${filepath}" "${HOME}/${file}"
  done
  shopt -u dotglob
}

symlink_nested_home_files() {
  local script_dir="$1"
  local filepath
  while IFS= read -rd '' filepath; do
    local main_path="${filepath#*home-nested/}"
    local main_basedir="${main_path%/*}"
    mkdir -p "${HOME}/${main_basedir}"
    backup_if_regular_file "${HOME}/${main_path}"
    symlink_if_absent "${filepath}" "${HOME}/${main_path}"
  done < <(find "${script_dir}/home-nested" -mindepth 2 -type f -print0)
}

backup_if_regular_file() {
  local filepath="$1"
  if [[ -f "${filepath}" && ! -L "${filepath}" ]]; then
    mv -v "${filepath}" "${filepath}.bak"
  fi
}

symlink_if_absent() {
  local src="$1"
  local target="$2"
  if [[ ! -e "${target}" ]]; then
    ln -sv "${src}" "${target}"
  fi
}

configure_iterm2() {
  echo 'Configuring iterm2 preferences...'
  defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string '~/.iterm2'
  defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
  echo '[Manual Workaround]: Activate iTerm2 preferences if auto-activation does not work'
  echo '                     Cmd + , > Preferences > Tick "Load preferences from a custom folder or URL"'
}

configure_vim() {
  echo 'Configuring vim...'
  local plugins_path="${HOME}/.vim/pack/plugins"
  mkdir -p "${plugins_path}"/{start,opt}
  local plugins=(
    'https://github.com/chriskempson/base16-vim.git'
    'https://github.com/scrooloose/nerdtree.git'
    'https://github.com/tpope/vim-fireplace.git'
    'https://github.com/pangloss/vim-javascript.git'
    'https://github.com/bhurlow/vim-parinfer.git'
    'https://github.com/tpope/vim-repeat.git'
    'https://github.com/tpope/vim-surround.git'
    'https://github.com/dense-analysis/ale.git'
  )
  for plugin in "${plugins[@]}"; do
    local basename="${plugin##*/}"
    local dirname="${basename%.*}"
    local plugin_dir="${plugins_path}/start/${dirname}"
    if [[ -d "${plugin_dir}" ]]; then
      git -C "${plugin_dir}" pull origin master
    else
      git clone "${plugin}" "${plugin_dir}"
    fi
  done
  vim -c 'helptags ALL' -c 'qall!' &> /dev/null
}

configure_asdf_plugins() {
  echo 'Configuring asdf plugins...'
  source "$(brew --prefix asdf)/asdf.sh"
  local plugin_props
  while IFS=' ' read -ra plugin_props; do
    configure_plugin "${plugin_props[@]}"
  done < "${HOME}/.tool-versions"
}

configure_plugin() {
  local plugin="$1"
  local versions=("${@:2}")
  upadd_plugin "${plugin}"
  install_plugin_versions "${plugin}" "${versions[@]}"
}

upadd_plugin() {
  local plugin="$1"
  if [[ "$(asdf plugin-list)" =~ (^|$'\n')"${plugin}"($|$'\n') ]]; then
    asdf plugin-update "${plugin}"
  else
    asdf plugin-add "${plugin}"
  fi
}

install_plugin_versions() {
  local plugin="$1"
  local versions=("${@:2}")
  for v in "${versions[@]}"; do
    asdf install "${plugin}" "${v}"
  done
  asdf global "${plugin}" "${versions[@]}"
}

install_pip_packages() {
  echo 'Installing pip packages...'
  python -m pip install --upgrade pip
  python -m pip install --upgrade --user pipx
  pipx install ansible
  pipx install yolk3k
}

main "$@"

