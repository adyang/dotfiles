#!/bin/bash

if [[ -z "${SCRIPT_DIR}" ]]; then
  UNRESOLVED_DIR="$(dirname "${BASH_SOURCE[0]}")" || exit "$?"
  SCRIPT_DIR="$(cd "${UNRESOLVED_DIR}" &>/dev/null && pwd -P)" || exit "$?"
fi
DOT_HOME="${DOT_HOME:-${HOME}}"
readonly SCRIPT_DIR DOT_HOME

main() {
  [[ "${CI}" == 'true' ]] || sudo_keep_alive
  symlink_dotfiles
  [[ "${CI}" == 'true' ]] || brew_kext_packages
  brew_packages
  install_powerline
  configure_iterm2
  "${SCRIPT_DIR}/configure-vim"
  configure_vscode
  configure_firefox
  configure_asdf_plugins
  install_pip_packages
  [[ "${CI}" == 'true' ]] || install_macos_updates
}

sudo_keep_alive() {
  sudo --stdin --validate --prompt="Please enter %u's password for sudo: " || exit "$?"
  sudo_until_process_ends
}

sudo_until_process_ends() {
  while true; do
    sudo --non-interactive true
    sleep 20
    kill -0 "$$" || exit
  done 2>/dev/null &
}

symlink_dotfiles() {
  echo "Symlinking dotfiles to ${DOT_HOME} ..."
  symlink_home_files "${SCRIPT_DIR}"
  symlink_nested_home_files "${SCRIPT_DIR}"
}

symlink_home_files() {
  shopt -s dotglob
  local script_dir="$1"
  local filepath
  for filepath in "${script_dir}/home"/*; do
    local file="${filepath##*/}"
    backup_if_regular_file "${DOT_HOME}/${file}" || exit "$?"
    symlink_if_absent "${filepath}" "${DOT_HOME}/${file}" || exit "$?"
  done
  shopt -u dotglob
}

symlink_nested_home_files() {
  local script_dir="$1"
  local filepath
  while IFS= read -rd '' filepath; do
    local main_path="${filepath#*home-nested/}"
    local main_basedir="${main_path%/*}"
    mkdir -p "${DOT_HOME}/${main_basedir}"
    backup_if_regular_file "${DOT_HOME}/${main_path}" || exit "$?"
    symlink_if_absent "${filepath}" "${DOT_HOME}/${main_path}" || exit "$?"
  done < <(find "${script_dir}/home-nested" -mindepth 2 -type f -print0)
}

backup_if_regular_file() {
  local filepath="$1"
  if [[ -f "${filepath}" && ! -L "${filepath}" ]]; then
    mv -v "${filepath}" "${filepath}.bak"
  fi
}

symlink_if_absent() {
  local src="$1"
  local target="$2"
  if [[ ! -e "${target}" ]]; then
    ln -sv "${src}" "${target}"
  fi
}

brew_kext_packages() {
  brew update || exit "$?"
  if ! brew bundle --verbose --file="${DOT_HOME}/Brewfile-kext"; then
    printf '\nPlease allow kext installation in System Preferences > Security & Privacy > General.\n'
    read -rp 'Press RETURN to continue when done...' || exit "$?"
    brew bundle --verbose --file="${DOT_HOME}/Brewfile-kext" || exit "$?"
  fi
}

brew_packages() {
  brew update || exit "$?"
  brew bundle --verbose --file="${DOT_HOME}/Brewfile" || exit "$?"
}

install_powerline() {
  echo 'Installing powerline-go...'
  local local_bin="${DOT_HOME}/.local/bin"
  local install_dir="${DOT_HOME}/.powerline-go"
  local url='https://github.com/justjanne/powerline-go/releases/download/v1.13.0/powerline-go-darwin-amd64'
  local dest="${install_dir}/${url##*/}-v1.13.0"
  if [[ ! -f "${dest}" ]]; then
    curl --create-dirs --progress-bar --location --output "${dest}" "${url}" || exit "$?"
    chmod u+x "${dest}"
    mkdir -p "${local_bin}"
    ln -sfv "${dest}" "${local_bin}/powerline-go"
  fi
}

configure_iterm2() {
  echo 'Configuring iterm2 preferences...'
  # shellcheck disable=SC2088
  defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string '~/.iterm2'
  defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
  echo '[Manual Workaround]: Activate iTerm2 preferences if auto-activation does not work'
  echo '                     Cmd + , > Preferences > Tick "Load preferences from a custom folder or URL"'
}

configure_vscode() {
  echo 'Configuring VS Code...'
  symlink_vscode_configs "${SCRIPT_DIR}/vscode" "${DOT_HOME}/Library/Application Support/Code/User"
  install_vscode_extensions "${SCRIPT_DIR}/vscode/extensions"
}

symlink_vscode_configs() {
  local src_dir="$1"
  local dest_dir="$2"
  mkdir -p "${dest_dir}"
  local configs=('keybindings.json' 'settings.json' 'snippets')
  local config
  for config in "${configs[@]}"; do
    backup_if_regular_file "${dest_dir}/${config}" || exit "$?"
    symlink_if_absent "${src_dir}/${config}" "${dest_dir}/${config}" || exit "$?"
  done
}

install_vscode_extensions() {
  local extensions_file="$1"
  local extension
  while read -r extension; do
    code --install-extension "${extension}" || exit "$?"
  done < "${extensions_file}"
}

configure_firefox() {
  echo 'Configuring Firefox...'
  create_firefox_profile_if_absent '/Applications/Firefox.app/Contents/MacOS/firefox' "${SCRIPT_DIR}/firefox" "${DOT_HOME}/Library/Application Support/Firefox"
  symlink_firefox_configs "${SCRIPT_DIR}/firefox" "${DOT_HOME}/Library/Application Support/Firefox/Profiles/privacy"
}

create_firefox_profile_if_absent() {
  local firefox_bin="$1"
  local src_dir="$2"
  local firefox_dir="$3"
  if [[ ! -d "${firefox_dir}/Profiles/privacy" ]]; then
    "${firefox_bin}" -CreateProfile "privacy ${firefox_dir}/Profiles/privacy" || exit "$?"
    cp "${src_dir}/profiles.ini" "${firefox_dir}/" || exit "$?"
    # Workaround to ensure Firefox starts default last start profile that is set in profiles.ini
    "${firefox_bin}" --headless -P 'privacy' & sleep 1 && kill "$!"
  fi
}

symlink_firefox_configs() {
  local src_dir="$1"
  local profile_dir="$2"
  cp "${profile_dir}/prefs.js" "${profile_dir}/prefs.js.bak" || exit "$?"
  backup_if_regular_file "${profile_dir}/user.js" || exit "$?"
  symlink_if_absent "${src_dir}/user.js" "${profile_dir}/user.js" || exit "$?"
}

configure_asdf_plugins() {
  echo 'Configuring asdf plugins...'
  # shellcheck source=/dev/null
  source "$(brew --prefix asdf)/asdf.sh" || exit "$?"
  local plugin_props
  while IFS=' ' read -ra plugin_props; do
    configure_plugin "${plugin_props[@]}" || exit "$?"
  done < "${DOT_HOME}/.tool-versions"
}

configure_plugin() {
  local plugin="$1"
  local versions=("${@:2}")
  upadd_plugin "${plugin}" || return "$?"
  install_plugin_versions "${plugin}" "${versions[@]}"
}

upadd_plugin() {
  local plugin="$1"
  if [[ "$(asdf plugin-list)" =~ (^|$'\n')"${plugin}"($|$'\n') ]]; then
    asdf plugin-update "${plugin}"
  else
    asdf plugin-add "${plugin}"
  fi
}

install_plugin_versions() {
  local plugin="$1"
  local versions=("${@:2}")
  local v
  for v in "${versions[@]}"; do
    asdf install "${plugin}" "${v}" || return "$?"
  done
  asdf global "${plugin}" "${versions[@]}"
}

install_pip_packages() {
  echo 'Installing pip packages...'
  python -m pip install --upgrade pip || exit "$?"
  python -m pip install --upgrade --user pipx || exit "$?"
  python -m pipx install ansible || exit "$?"
  python -m pipx install yolk3k || exit "$?"
}

install_macos_updates() {
  sudo softwareupdate --install --all
}

(return 0 2>/dev/null) || main "$@"

