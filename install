#!/bin/bash

UNRESOLVED_DIR="$(dirname "${BASH_SOURCE[0]}")" || exit "$?"
SCRIPT_DIR="$(cd "${UNRESOLVED_DIR}" &>/dev/null && pwd -P)" || exit "$?"
readonly SCRIPT_DIR

# shellcheck source=lib/log.sh
source "${SCRIPT_DIR}/lib/log.sh"
# shellcheck source=lib/file.sh
source "${SCRIPT_DIR}/lib/file.sh"

main() {
  setup_environment
  [[ "${CI}" == 'true' ]] || sudo_keep_alive
  configure_shell
  symlink_dotfiles
  [[ "${CI}" == 'true' ]] || brew_kext_packages
  brew_packages
  configure_docker
  "${SCRIPT_DIR}/configure-vim" || exit "$?"
  "${SCRIPT_DIR}/configure-vscode" || exit "$?"
  "${SCRIPT_DIR}/configure-firefox" || exit "$?"
  configure_asdf_plugins
  install_pip_packages
  "${SCRIPT_DIR}/configure-macos" || exit "$?"
}

setup_environment() {
  DOT_HOME="${HOME}"
  readonly DOT_HOME
}

sudo_keep_alive() {
  sudo --stdin --validate --prompt="Please enter %u's password for sudo: " || exit "$?"
  sudo_until_process_ends
}

sudo_until_process_ends() {
  while true; do
    sudo --non-interactive true
    sleep 20
    kill -0 "$$" || exit
  done 2>/dev/null &
}

configure_shell() {
  header "Configure Shell"
  sudo chsh -s /bin/bash "$(whoami)" || exit "$?"
}

symlink_dotfiles() {
  header "Symlink dotfiles to ${DOT_HOME}"
  symlink_home_files "${SCRIPT_DIR}"
  symlink_nested_home_files "${SCRIPT_DIR}"
}

symlink_home_files() {
  shopt -s dotglob
  local script_dir="$1"
  local filepath
  for filepath in "${script_dir}/home"/*; do
    local file="${filepath##*/}"
    backup_if_regular_file "${DOT_HOME}/${file}" || exit "$?"
    symlink_if_absent "${filepath}" "${DOT_HOME}/${file}" || exit "$?"
  done
  shopt -u dotglob
}

symlink_nested_home_files() {
  local script_dir="$1"
  local filepath
  while IFS= read -rd '' filepath; do
    local main_path="${filepath#*home-nested/}"
    local main_basedir="${main_path%/*}"
    mkdir -p "${DOT_HOME}/${main_basedir}"
    backup_if_regular_file "${DOT_HOME}/${main_path}" || exit "$?"
    symlink_if_absent "${filepath}" "${DOT_HOME}/${main_path}" || exit "$?"
  done < <(find "${script_dir}/home-nested" -mindepth 2 -type f -print0)
}

brew_kext_packages() {
  header 'Brew Packages Requiring KEXT Permissions'
  brew update || exit "$?"
  if ! brew bundle --verbose --file="${DOT_HOME}/Brewfile-kext"; then
    note $'\nPlease allow kext installation in System Preferences > Security & Privacy > General.'
    read -rp 'Press RETURN to continue when done...' || exit "$?"
    brew bundle --verbose --file="${DOT_HOME}/Brewfile-kext" || exit "$?"
  fi
}

brew_packages() {
  header 'Brewing Packages'
  brew update || exit "$?"
  brew bundle --verbose --file="${DOT_HOME}/Brewfile" || exit "$?"
}

configure_docker() {
  header 'Configure Docker'
  configure_docker_cli_plugins "${DOT_HOME}/.docker/cli-plugins" || exit
  configure_colima || exit
}

configure_docker_cli_plugins() {
  local plugins_dir="$1"
  local plugin
  mkdir -p "${plugins_dir}" || return
  for plugin in {docker-compose,docker-buildx}; do
    symlink_if_absent "$(brew --prefix "${plugin}")/bin/${plugin}" "${plugins_dir}/${plugin}" || return
  done
}

configure_colima() {
  symlink_if_absent "${DOT_HOME}/.colima/ssh_config" "${DOT_HOME}/.ssh/config.d/colima"
}

configure_asdf_plugins() {
  header 'Configure asdf Plugins'
  export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
  configure_plugins || exit "$?"
  configure_plugin_versions || exit "$?"
}

configure_plugins() {
  local plugin_props
  while IFS=' ' read -ra plugin_props; do
    upadd_plugin "${plugin_props[@]}" || return "$?"
  done < "${DOT_HOME}/.asdf-plugins"
}

upadd_plugin() {
  local plugin="$1"
  if [[ "$(asdf plugin list)" =~ (^|$'\n')"${plugin}"($|$'\n') ]]; then
    asdf plugin update "${plugin}"
  else
    asdf plugin add "$@"
  fi
}

configure_plugin_versions() {
  asdf install
}

install_pip_packages() {
  header 'Install pip Packages'
  python -m pip install --upgrade pip || exit "$?"
  python -m pip install --upgrade --user pipx || exit "$?"
  python -m pipx install --include-deps --pip-args='--upgrade' --force ansible || exit "$?"
  python -m pipx install --pip-args='--upgrade' --force yolk3k || exit "$?"
}

(return 0 2>/dev/null) || main "$@"
