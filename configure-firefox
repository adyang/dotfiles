#!/bin/bash

UNRESOLVED_DIR="$(dirname "${BASH_SOURCE[0]}")" || exit "$?"
SCRIPT_DIR="$(cd "${UNRESOLVED_DIR}" &>/dev/null && pwd -P)" || exit "$?"
readonly SCRIPT_DIR

# shellcheck source=lib/log.sh
source "${SCRIPT_DIR}/lib/log.sh"
# shellcheck source=lib/file.sh
source "${SCRIPT_DIR}/lib/file.sh"

main() {
  DOT_HOME="${DOT_HOME:-${HOME}}"
  DOT_TMP_DIR="$(mktemp -d)" || exit "$?"
  readonly DOT_HOME DOT_TMP_DIR
  trap 'rm -rf "${DOT_TMP_DIR}"' EXIT

  header 'Configure Firefox'
  configure_firefox
}

configure_firefox() {
  create_firefox_profile_if_absent '/Applications/Firefox.app/Contents/MacOS/firefox' "${SCRIPT_DIR}/firefox" "${DOT_HOME}/Library/Application Support/Firefox"
  symlink_firefox_configs "${SCRIPT_DIR}/firefox" "${DOT_HOME}/Library/Application Support/Firefox/Profiles/privacy"
  update_userjs "${DOT_HOME}/Library/Application Support/Firefox/Profiles/privacy"
  install_firefox_extensions "${SCRIPT_DIR}/firefox/extensions" "${DOT_HOME}/Library/Application Support/Firefox/Profiles/privacy/extensions" "${DOT_TMP_DIR}"
}

create_firefox_profile_if_absent() {
  local firefox_bin="$1"
  local src_dir="$2"
  local firefox_dir="$3"
  if [[ ! -d "${firefox_dir}/Profiles/privacy" ]]; then
    "${firefox_bin}" -CreateProfile "privacy ${firefox_dir}/Profiles/privacy" || exit "$?"
    cp "${src_dir}/profiles.ini" "${firefox_dir}/" || exit "$?"
    # Workaround to ensure Firefox starts default last start profile that is set in profiles.ini
    "${firefox_bin}" --headless -P 'privacy' & sleep 3 && kill "$!" && wait "$!"
  fi
  "${firefox_bin}" --headless -setDefaultBrowser & sleep 5 && kill "$!"
}

symlink_firefox_configs() {
  local src_dir="$1"
  local profile_dir="$2"
  local filepath
  for filepath in "${src_dir}/arkenfox"/{updater.sh,user-overrides.js}; do
    local filename="${filepath##*/}"
    backup_if_regular_file "${profile_dir}/${filename}" || exit
    symlink_if_absent "${filepath}" "${profile_dir}/${filename}" || exit
  done
  cp -f "${src_dir}/arkenfox/prefsCleaner.sh" "${profile_dir}/prefsCleaner.sh" || exit
}

update_userjs() {
  local profile_dir="$1"
  "${profile_dir}/updater.sh" -p "${profile_dir}" -us || exit
  (cd "${profile_dir}" && "./prefsCleaner.sh" -s) || exit
}

install_firefox_extensions() {
  local extension_urls_file="$1"
  local extensions_dir="$2"
  local tmp_dir="$3"
  mkdir -p "${extensions_dir}" || exit "$?"
  local url
  while read -r url; do
    install_firefox_extension_if_absent "${url}" "${extensions_dir}" "${tmp_dir}" || exit "$?"
  done < "${extension_urls_file}"
}

install_firefox_extension_if_absent() {
  local meta_url="$1"
  local extensions_dir="$2"
  local tmp_dir="$3"
  local extension_id extension_name download_url checksum
  obtain_firefox_extension_info "${meta_url}" > "${tmp_dir}/extension-info" || return "$?"
  IFS=$'\n' read -rd '' extension_id extension_name download_url checksum < "${tmp_dir}/extension-info"
  if [[ -f "${extensions_dir}/${extension_id}.xpi" ]]; then
    echo "${extension_name} already exists at '${extensions_dir}/${extension_id}.xpi'."
  else
    echo "Installing ${extension_name}..."
    download_firefox_extension "${download_url}" "${tmp_dir}/${extension_id}" "${checksum}" || return "$?"
    mv -v "${tmp_dir}/${extension_id}" "${extensions_dir}/${extension_id}.xpi"
  fi
}

obtain_firefox_extension_info() {
  local meta_url="$1"
  local meta
  meta="$(curl --fail --silent --show-error --location "${meta_url}")" || return "$?"
  jq --raw-output --exit-status \
    '.guid, .name."en-US", .current_version.files[0].url, .current_version.files[0].hash, "\u0000"
      | if . == null then
          "Error: missing extension info field(s).\n"|halt_error(1)
        else . end' \
    <<<"${meta}"
}

download_firefox_extension() {
  local url="$1"
  local dest="$2"
  local checksum="$3"
  curl --fail --progress-bar --location --output "${dest}" "${url}" || return "$?"
  shasum --algorithm 256 --check <<<"${checksum#sha256:} ${dest}"
}

(return 0 2>/dev/null) || main "$@"
