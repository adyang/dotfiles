#!/bin/bash

UNRESOLVED_DIR="$(dirname "${BASH_SOURCE[0]}")" || exit
SCRIPT_DIR="$(cd "${UNRESOLVED_DIR}" &>/dev/null && pwd -P)" || exit
GEN_SSH_HOME="${GEN_SSH_HOME:-${HOME}}"
readonly SCRIPT_DIR GEN_SSH_HOME

# shellcheck source=lib/log.sh
source "${SCRIPT_DIR}/lib/log.sh"

main() {
  header 'Generate SSH Keys'

  parse_arguments "$@"
  prompt_passphrase_into passphrase
  generate_keypair "${KEY_FILENAME}" "${passphrase}"
}

parse_arguments() {
  KEY_FILENAME='id_ed25519'
  while true; do
    case "$1" in
      --key-filename)
        KEY_FILENAME="$2"
        shift
        ;;
      --*)
        err "Invalid option: '$1'"
        usage
        ;;
      *) break;;
    esac
    shift
  done
  readonly KEY_FILENAME
}

usage() {
  err "\
usage: ./generate-ssh-keys [--key-filename <private-key-filename>]"
  exit 2
}

prompt_passphrase_into() {
  local output_var="$1"
  set +o allexport
  unset -v passphrase
  IFS= read -rsp 'Please enter desired passphrase for SSH key generation: ' "${output_var}" || exit
  if [[ -z "${!output_var}" ]]; then
    echo 'Error: passphrase should not be empty.'
    exit 1
  fi
}

generate_keypair() {
  local filename="$1"
  local passphrase="$2"
 
  ssh-keygen -t ed25519 -f "${GEN_SSH_HOME}/.ssh/${filename}" -N "${passphrase}" || exit

  expect <<EOF || exit
spawn ssh-add -K "${GEN_SSH_HOME}/.ssh/${filename}"
expect {
    -re "^Enter passphrase .*: $" { send -- "${passphrase}\r"; exp_continue }
    -re "Bad passphrase.*: $" { exit 1 }
    eof
}
EOF

  pbcopy < "${GEN_SSH_HOME}/.ssh/${filename}.pub"
  note 'Public key has been copied to the clipboard.'
}

main "$@"
