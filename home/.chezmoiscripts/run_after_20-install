#!/usr/bin/env bash

readonly SCRIPTS_LIB_DIR="${CHEZMOI_WORKING_TREE}/lib"
readonly LOCAL_BIN_DIR="${HOME}/.local/bin"

# shellcheck source=../../lib/log.bash
source "${SCRIPTS_LIB_DIR}/log.bash"
# shellcheck source=../../lib/file.bash
source "${SCRIPTS_LIB_DIR}/file.bash"

main() {
  [[ "${CI}" == 'true' ]] || sudo_keep_alive
  configure_shell
  "${LOCAL_BIN_DIR}/dot-brew" || exit
  configure_docker
  "${LOCAL_BIN_DIR}/dot-vim" || exit
  "${LOCAL_BIN_DIR}/dot-firefox" || exit
  configure_asdf_plugins
  install_pip_packages
  "${LOCAL_BIN_DIR}/dot-macos" || exit
}

sudo_keep_alive() {
  sudo --stdin --validate --prompt="Please enter %u's password for sudo: " || exit
  sudo_until_process_ends
}

sudo_until_process_ends() {
  while true; do
    sudo --non-interactive true
    sleep 20
    kill -0 "$$" || exit
  done 2>/dev/null &
}

configure_shell() {
  header "Configure Shell"
  sudo chsh -s /bin/bash "$(whoami)" || exit
}

configure_docker() {
  header 'Configure Docker'
  configure_docker_cli_plugins "${HOME}/.docker/cli-plugins" || exit
}

configure_docker_cli_plugins() {
  local plugins_dir="$1"
  local plugin
  mkdir -p "${plugins_dir}" || return
  for plugin in {docker-compose,docker-buildx}; do
    symlink_if_absent "$(brew --prefix "${plugin}")/bin/${plugin}" "${plugins_dir}/${plugin}" || return
  done
}

configure_asdf_plugins() {
  header 'Configure asdf Plugins'
  export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
  configure_plugins || exit
  configure_plugin_versions || exit
}

configure_plugins() {
  local plugin_props
  while IFS=' ' read -ra plugin_props; do
    upadd_plugin "${plugin_props[@]}" || return "$?"
  done < "${HOME}/.asdf-plugins"
}

upadd_plugin() {
  local plugin="$1"
  if [[ "$(asdf plugin list)" =~ (^|$'\n')"${plugin}"($|$'\n') ]]; then
    asdf plugin update "${plugin}"
  else
    asdf plugin add "$@"
  fi
}

configure_plugin_versions() {
  asdf install
}

install_pip_packages() {
  header 'Install pip Packages'
  python -m pip install --upgrade pip || exit
  python -m pip install --upgrade --user pipx || exit
  python -m pipx install --include-deps --pip-args='--upgrade' --force ansible || exit
  python -m pipx install --pip-args='--upgrade' --force yolk3k || exit
}

(return 0 2>/dev/null) || main "$@"
